#! /usr/bin/env python
# Memsense configuration

PACKAGE='memsense_imu'
NODE='IMUBaseNode'
CONFIG='IMUDynParams'

from dynamic_reconfigure.parameter_generator_catkin import *

class SensorLevels:
  RECONFIGURE_RUNNING = 0
  RECONFIGURE_STOP = 1
  RECONFIGURE_CLOSE = 3

gen = ParameterGenerator()

# IMU type
device_types = gen.enum([gen.const("NIMU_3TEMP", str_t, "nIMU_3temp", "Nano IMU with 3 temperature sensors")],
                        "Memsense IMU device type.")
gen.add("imu_type",
         str_t,
         SensorLevels.RECONFIGURE_CLOSE,
         "IMU device type name",
         "nIMU_3temp",
         edit_method = device_types)

# Measurement ranges
gen.add("gyros_range",  double_t, SensorLevels.RECONFIGURE_CLOSE, "Gyroscopes' range (deg/sec).",   150.0, 0.0, 1200.0)
gen.add("accels_range", double_t, SensorLevels.RECONFIGURE_CLOSE, "Accelerometers' range (g).",       2.0, 0.0,   40.0)
gen.add("mags_range",   double_t, SensorLevels.RECONFIGURE_CLOSE, "Magnetometers' range (gauss).",    1.9, 0.0,    4.0)

# Serial port device file
gen.add("serial_port",  
        str_t,
        SensorLevels.RECONFIGURE_STOP,
        "Serial port device file name (including full path)",
        "/dev/ttyUSB0")

# Measurement variances
gen.add("gyros_var",  double_t, SensorLevels.RECONFIGURE_RUNNING, "Gyroscopes' var (deg^2/seg^2).",   0.0, 0.0,  1.0)
gen.add("accels_var", double_t, SensorLevels.RECONFIGURE_RUNNING, "Accelerometers' var (g^2).",       0.0, 0.0,  0.00001)
gen.add("mags_var",   double_t, SensorLevels.RECONFIGURE_RUNNING, "Magnetometers' var (gauss^2).",    0.0, 0.0,  0.00001)

# Measurement biases per axis
gen.add("gyro_bias_x",  double_t, SensorLevels.RECONFIGURE_RUNNING, "x gyroscope's bias (deg/sec).",  0.0, -1.5, 1.5)
gen.add("gyro_bias_y",  double_t, SensorLevels.RECONFIGURE_RUNNING, "y gyroscope's bias (deg/sec).",  0.0, -1.5, 1.5)
gen.add("gyro_bias_z",  double_t, SensorLevels.RECONFIGURE_RUNNING, "z gyroscope's bias (deg/sec).",  0.0, -1.5, 1.5)
gen.add("accel_bias_x", double_t, SensorLevels.RECONFIGURE_RUNNING, "x accelerometer's bias (g).",    0.0, -0.5, 0.5)
gen.add("accel_bias_y", double_t, SensorLevels.RECONFIGURE_RUNNING, "y accelerometer's bias (g).",    0.0, -0.5, 0.5)
gen.add("accel_bias_z", double_t, SensorLevels.RECONFIGURE_RUNNING, "z accelerometer's bias (g).",    0.0, -0.5, 0.5)
gen.add("mag_bias_x",   double_t, SensorLevels.RECONFIGURE_RUNNING, "x magnetometer's bias (gauss).", 0.0, -1.0, 1.0)
gen.add("mag_bias_y",   double_t, SensorLevels.RECONFIGURE_RUNNING, "y magnetometer's bias (gauss).", 0.0, -1.0, 1.0)
gen.add("mag_bias_z",   double_t, SensorLevels.RECONFIGURE_RUNNING, "z magnetometer's bias (gauss).", 0.0, -1.0, 1.0)
gen.add("mag_bias_xx",   double_t, SensorLevels.RECONFIGURE_RUNNING, "xx magnetometer's trans (gauss).", 0.0, -1.0, 1.0)
gen.add("mag_bias_xy",   double_t, SensorLevels.RECONFIGURE_RUNNING, "xy magnetometer's trans (gauss).", 0.0, -1.0, 1.0)
gen.add("mag_bias_xz",   double_t, SensorLevels.RECONFIGURE_RUNNING, "xz magnetometer's trans (gauss).", 0.0, -1.0, 1.0)
gen.add("mag_bias_yx",   double_t, SensorLevels.RECONFIGURE_RUNNING, "yx magnetometer's trans (gauss).", 0.0, -1.0, 1.0)
gen.add("mag_bias_yy",   double_t, SensorLevels.RECONFIGURE_RUNNING, "yy magnetometer's trans (gauss).", 0.0, -1.0, 1.0)
gen.add("mag_bias_yz",   double_t, SensorLevels.RECONFIGURE_RUNNING, "yz magnetometer's trans (gauss).", 0.0, -1.0, 1.0)
gen.add("mag_bias_zx",   double_t, SensorLevels.RECONFIGURE_RUNNING, "zx magnetometer's trans (gauss).", 0.0, -1.0, 1.0)
gen.add("mag_bias_zy",   double_t, SensorLevels.RECONFIGURE_RUNNING, "zy magnetometer's trans (gauss).", 0.0, -1.0, 1.0)
gen.add("mag_bias_zz",   double_t, SensorLevels.RECONFIGURE_RUNNING, "zz magnetometer's trans (gauss).", 0.0, -1.0, 1.0)

# Polling frequency (useful to save CPU)
gen.add("polling_rate", 
        double_t, 
        SensorLevels.RECONFIGURE_RUNNING,
        "Polling rate (set the device maximum output to avoid busy waits (0.0 disables polling)",
        150.0, 0.0, 1000.0)

# Filter parameters
#gen.add("data_filtering", 
#        bool_t, 
#        SensorLevels.RECONFIGURE_RUNNING,
#        "Enable data filtering (mean each filter_sec seconds)",
#        True)
gen.add("filter_rate", 
        double_t, 
        SensorLevels.RECONFIGURE_RUNNING,
        "Rate for filtered data publications (0.0 disables filtering)",
        10.0, 0.0, 50.0)

# IMU frame identifier
gen.add("frame_id",
        str_t, 
        SensorLevels.RECONFIGURE_RUNNING, 
        "Frame in which IMU readings will be returned",
        "imu")

# generate the IMU parameter class
exit(gen.generate(PACKAGE, NODE, CONFIG))

